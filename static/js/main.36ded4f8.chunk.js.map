{"version":3,"sources":["TextFlow.js","Logo.js","ModalPopUp.js","App.js","serviceWorker.js","index.js","images/Tatooine.png"],"names":["TextFlow","react_default","a","createElement","react","className","Logo","alt","src","load","ModalPopUp","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","on","handleLoad","props","setTimeout","state","visible","planet","terrain","showComponent","_this2","fetch","then","response","json","data","_this3","onLoad","id","style","cursor","Tatooine","onClick","openModal","lib_default","width","height","effect","onClickAway","closeModal","name","href","console","log","Component","ReactTimeout","App","src_Logo","src_TextFlow_0","src_ModalPopUp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.36ded4f8.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport './TextFlow.css';\r\nimport 'tachyons';\r\n\r\nconst TextFlow = () => {\r\n    return (\r\n        <Fragment>\r\n        <div className=\"star-wars-intro tc\">\r\n            <p className=\"intro-text\"> In galaxy far, far away...</p>\r\n            <div className=\"main-content\">\r\n                <div className=\"title-content\">\r\n                    <p>Please wait for text to finish.</p><br/>\r\n                    <p>Then, one planet will show, click on it to find out his name and terrain!</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </Fragment>\r\n    );     \r\n};\r\n\r\nexport default TextFlow;\r\n","import React from 'react'\r\n\r\nfunction Logo() {\r\n    return (\r\n        <div className=\"w-25 pt5\">\r\n            <img alt='Logo' src='https://logos-download.com/wp-content/uploads/2016/09/Star_Wars_logo-1.png'></img>\r\n          </div>\r\n    )\r\n}\r\n\r\nexport default Logo","import React, { Fragment, Component } from 'react'\r\nimport Modal from 'react-awesome-modal'\r\nimport Tatooine from './images/Tatooine.png'\r\nimport ReactTimeout from 'react-timeout'\r\n\r\nconst API = 'https://swapi.co/api/planets/1/';\r\nlet load = true;\r\n\r\nclass ModalPopUp extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            visible: false ,\r\n            planet: '',\r\n            terrain: '',\r\n            on: false,\r\n            showComponent: false\r\n        }\r\n\r\n    }\r\n\r\n    openModal() {\r\n        this.setState({\r\n            visible : true\r\n        })\r\n    }\r\n\r\n    closeModal() {\r\n        this.setState({\r\n            visible : false\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(API)\r\n          .then(response => response.json())\r\n          .then(data => this.setState({ planet: data }));\r\n         }\r\n\r\n    toggle = () => {\r\n        this.setState({ on: true })\r\n        }\r\n          \r\n    handleLoad = () => {\r\n        load ? this.props.setTimeout(this.toggle, 20000) :\r\n        load = false\r\n        }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <section className=\"tc\" onLoad = {this.handleLoad()}>\r\n                {this.state.on ? \r\n                    <div>\r\n                        <img \r\n                            id=\"Tatooine\" \r\n                            style={ { cursor: 'pointer' } } \r\n                            className=\"br-100 h5 w5 dib pa5\" \r\n                            alt=\"Tatooine\" src={ Tatooine } \r\n                            onClick={ () => {this.openModal() }}/> \r\n                            \r\n                        </div> : null }\r\n                </section>\r\n                <Modal \r\n                    visible={this.state.visible}\r\n                    width=\"400\"\r\n                    height=\"300\"\r\n                    effect=\"fadeInUp\"\r\n                    onClickAway={() => this.closeModal()}\r\n                >\r\n                    <div className='tc'>\r\n                        <h1>Planet property</h1>\r\n                        <h3>Name: {this.state.planet.name}</h3>\r\n                        <h3>Terrain: {this.state.planet.terrain}</h3>\r\n                        <img className=\"br-100 h5 w5 dib\" alt=\"Planet\" src={Tatooine}/>\r\n                        <br></br><a className=\"f6 grow no-underline br-pill ba ph3 pv2 mb2 dib white\" href=\"#0\" onClick={() => this.closeModal()}>Close</a>\r\n                    </div>\r\n                </Modal>\r\n                {console.log('Into modal, state: '+ this.state.visible)}\r\n                {console.log('Into modal, props: '+ this.props.visible)}\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReactTimeout(ModalPopUp)\r\n","import React, { Fragment, Component } from 'react'\nimport './App.css'\nimport TextFlow from './TextFlow'\nimport Logo from './Logo'\nimport './TwinklingStars.css'\nimport 'tachyons'\nimport './Animation.css'\nimport ModalPopUp from './ModalPopUp';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n    }\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"flex flex-column items-center\">\n          <Logo />\n          <div className=\"w-25\">\n            <TextFlow />\n          </div>\n          <div className='animated fadeIn'>\n            <ModalPopUp />\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Tatooine.883a1ed7.png\";"],"sourceRoot":""}